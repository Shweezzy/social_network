/*

express - пакет для відтворення запросів
express-validator - ми використовуємо експрес-валідатор, щоб перевірити, чи дані, які надсилаються, відповідають нашим стандартам, наприклад, ми можемо перевірити електронну пошту, якщо рядок порожній
jsonwebtoken - змога зробити кожного юзера унікальним за допомогою сокетів
bcryptjs - змога створювати хэш паролі
forever(nodemon) - дає можливість самостійно не перезавантажувати node index.js
mongoose - дає можливість конектитись до БД і т.д.

1. Створення локального сервера з портом server.js з підключеними CORS для запросів
2. Створення підключення до БД - асинхронна ф-я mongoose.connect
3. Створення роутів app.use('/api/us /post)
4. Створення шаблону(схеми) schemas/newUser.js для кожного користувача, який буде відсилатись до БД
5. Створення роута(users.js - router.post('/register') і форма його регістрації, використання можливостей express-validator,
    хеш-паролі(bcryptjs), новий користувач new User({name,laastName...})
6. Додавання можливостей gravatar кожному створеному користувачу
7. Використання jsonwebtoken для проходження аутентифыкації
8. Провірка наявний полів у БД inaccessibleUser inaccessibleUserName через метод findOne.
9 Створення роута(users.js - router.post('/login') перевірка наявного користувача в БД методом findOne
    перевірка пароля у разі знаходження користувача методом compare(зрівнює входящий пароль з паролем БД)

*/